// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: capability_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CapabilityServiceClient is the client API for CapabilityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CapabilityServiceClient interface {
	CreateCap(ctx context.Context, in *CreateCapReq, opts ...grpc.CallOption) (*CreateCapRes, error)
	ReadCap(ctx context.Context, in *ReadCapReq, opts ...grpc.CallOption) (*ReadCapRes, error)
	UpdateCap(ctx context.Context, in *UpdateCapReq, opts ...grpc.CallOption) (*UpdateCapRes, error)
	DeleteCap(ctx context.Context, in *DeleteCapReq, opts ...grpc.CallOption) (*DeleteCapRes, error)
	ListCap(ctx context.Context, in *ListCapReq, opts ...grpc.CallOption) (CapabilityService_ListCapClient, error)
	AddRoleCapability(ctx context.Context, in *AddRoleCapabilitiesReq, opts ...grpc.CallOption) (*AddRoleCapabilitiesRes, error)
}

type capabilityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCapabilityServiceClient(cc grpc.ClientConnInterface) CapabilityServiceClient {
	return &capabilityServiceClient{cc}
}

func (c *capabilityServiceClient) CreateCap(ctx context.Context, in *CreateCapReq, opts ...grpc.CallOption) (*CreateCapRes, error) {
	out := new(CreateCapRes)
	err := c.cc.Invoke(ctx, "/CapabilityService/CreateCap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capabilityServiceClient) ReadCap(ctx context.Context, in *ReadCapReq, opts ...grpc.CallOption) (*ReadCapRes, error) {
	out := new(ReadCapRes)
	err := c.cc.Invoke(ctx, "/CapabilityService/ReadCap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capabilityServiceClient) UpdateCap(ctx context.Context, in *UpdateCapReq, opts ...grpc.CallOption) (*UpdateCapRes, error) {
	out := new(UpdateCapRes)
	err := c.cc.Invoke(ctx, "/CapabilityService/UpdateCap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capabilityServiceClient) DeleteCap(ctx context.Context, in *DeleteCapReq, opts ...grpc.CallOption) (*DeleteCapRes, error) {
	out := new(DeleteCapRes)
	err := c.cc.Invoke(ctx, "/CapabilityService/DeleteCap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capabilityServiceClient) ListCap(ctx context.Context, in *ListCapReq, opts ...grpc.CallOption) (CapabilityService_ListCapClient, error) {
	stream, err := c.cc.NewStream(ctx, &CapabilityService_ServiceDesc.Streams[0], "/CapabilityService/ListCap", opts...)
	if err != nil {
		return nil, err
	}
	x := &capabilityServiceListCapClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CapabilityService_ListCapClient interface {
	Recv() (*ListCapRes, error)
	grpc.ClientStream
}

type capabilityServiceListCapClient struct {
	grpc.ClientStream
}

func (x *capabilityServiceListCapClient) Recv() (*ListCapRes, error) {
	m := new(ListCapRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *capabilityServiceClient) AddRoleCapability(ctx context.Context, in *AddRoleCapabilitiesReq, opts ...grpc.CallOption) (*AddRoleCapabilitiesRes, error) {
	out := new(AddRoleCapabilitiesRes)
	err := c.cc.Invoke(ctx, "/CapabilityService/AddRoleCapability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CapabilityServiceServer is the server API for CapabilityService service.
// All implementations must embed UnimplementedCapabilityServiceServer
// for forward compatibility
type CapabilityServiceServer interface {
	CreateCap(context.Context, *CreateCapReq) (*CreateCapRes, error)
	ReadCap(context.Context, *ReadCapReq) (*ReadCapRes, error)
	UpdateCap(context.Context, *UpdateCapReq) (*UpdateCapRes, error)
	DeleteCap(context.Context, *DeleteCapReq) (*DeleteCapRes, error)
	ListCap(*ListCapReq, CapabilityService_ListCapServer) error
	AddRoleCapability(context.Context, *AddRoleCapabilitiesReq) (*AddRoleCapabilitiesRes, error)
	mustEmbedUnimplementedCapabilityServiceServer()
}

// UnimplementedCapabilityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCapabilityServiceServer struct {
}

func (UnimplementedCapabilityServiceServer) CreateCap(context.Context, *CreateCapReq) (*CreateCapRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCap not implemented")
}
func (UnimplementedCapabilityServiceServer) ReadCap(context.Context, *ReadCapReq) (*ReadCapRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCap not implemented")
}
func (UnimplementedCapabilityServiceServer) UpdateCap(context.Context, *UpdateCapReq) (*UpdateCapRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCap not implemented")
}
func (UnimplementedCapabilityServiceServer) DeleteCap(context.Context, *DeleteCapReq) (*DeleteCapRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCap not implemented")
}
func (UnimplementedCapabilityServiceServer) ListCap(*ListCapReq, CapabilityService_ListCapServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCap not implemented")
}
func (UnimplementedCapabilityServiceServer) AddRoleCapability(context.Context, *AddRoleCapabilitiesReq) (*AddRoleCapabilitiesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleCapability not implemented")
}
func (UnimplementedCapabilityServiceServer) mustEmbedUnimplementedCapabilityServiceServer() {}

// UnsafeCapabilityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CapabilityServiceServer will
// result in compilation errors.
type UnsafeCapabilityServiceServer interface {
	mustEmbedUnimplementedCapabilityServiceServer()
}

func RegisterCapabilityServiceServer(s grpc.ServiceRegistrar, srv CapabilityServiceServer) {
	s.RegisterService(&CapabilityService_ServiceDesc, srv)
}

func _CapabilityService_CreateCap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapabilityServiceServer).CreateCap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CapabilityService/CreateCap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapabilityServiceServer).CreateCap(ctx, req.(*CreateCapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CapabilityService_ReadCap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapabilityServiceServer).ReadCap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CapabilityService/ReadCap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapabilityServiceServer).ReadCap(ctx, req.(*ReadCapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CapabilityService_UpdateCap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapabilityServiceServer).UpdateCap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CapabilityService/UpdateCap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapabilityServiceServer).UpdateCap(ctx, req.(*UpdateCapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CapabilityService_DeleteCap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapabilityServiceServer).DeleteCap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CapabilityService/DeleteCap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapabilityServiceServer).DeleteCap(ctx, req.(*DeleteCapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CapabilityService_ListCap_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCapReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CapabilityServiceServer).ListCap(m, &capabilityServiceListCapServer{stream})
}

type CapabilityService_ListCapServer interface {
	Send(*ListCapRes) error
	grpc.ServerStream
}

type capabilityServiceListCapServer struct {
	grpc.ServerStream
}

func (x *capabilityServiceListCapServer) Send(m *ListCapRes) error {
	return x.ServerStream.SendMsg(m)
}

func _CapabilityService_AddRoleCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleCapabilitiesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapabilityServiceServer).AddRoleCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CapabilityService/AddRoleCapability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapabilityServiceServer).AddRoleCapability(ctx, req.(*AddRoleCapabilitiesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CapabilityService_ServiceDesc is the grpc.ServiceDesc for CapabilityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CapabilityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CapabilityService",
	HandlerType: (*CapabilityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCap",
			Handler:    _CapabilityService_CreateCap_Handler,
		},
		{
			MethodName: "ReadCap",
			Handler:    _CapabilityService_ReadCap_Handler,
		},
		{
			MethodName: "UpdateCap",
			Handler:    _CapabilityService_UpdateCap_Handler,
		},
		{
			MethodName: "DeleteCap",
			Handler:    _CapabilityService_DeleteCap_Handler,
		},
		{
			MethodName: "AddRoleCapability",
			Handler:    _CapabilityService_AddRoleCapability_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCap",
			Handler:       _CapabilityService_ListCap_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "capability_service.proto",
}
